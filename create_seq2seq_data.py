# -*- coding: utf-8 -*-
"""create_seq2seq_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AoGO_xWXy5_31v8Au1kzRwLLyU9QVOOz
"""



# Import the necessary libraries
import numpy as np
import pandas as pd

# Load the dataset from a CSV file
data = pd.read_csv("metro_all.csv")

# Select the relevant columns
columns_to_keep = ['datetime', 'Load', 'Load_previous_hour', 'TOA_SW_DWN']
df = data[columns_to_keep]

# Convert the 'datetime' column to datetime format and set it as the index
df['datetime'] = pd.to_datetime(df['datetime'])
df.set_index('datetime', inplace=True)

# Normalize the data (optional)
# Create new scalers for each feature
from sklearn.preprocessing import MinMaxScaler
load_scaler = MinMaxScaler()
temp_scaler = MinMaxScaler()

# Fit and transform the data
df['Load'] = load_scaler.fit_transform(df[['Load']])
df['TOA_SW_DWN'] = temp_scaler.fit_transform(df[['TOA_SW_DWN']])
df['Load_previous_hour'] = temp_scaler.fit_transform(df[['Load_previous_hour']])

# Split the data into train, validation, and test sets
total_size = len(df)
train_size = int(total_size * 0.7)
valid_size = int(total_size * 0.2)
test_size = total_size - train_size - valid_size

train = df.iloc[:train_size].values
valid = df.iloc[train_size:train_size+valid_size].values
test = df.iloc[train_size+valid_size:].values

# Create the encoder and decoder inputs
def create_seq2seq_data(data, sequence_length=24):
    """
    #Function to create the input and output data for a sequence-to-sequence model.
    #data: The input data (a numpy array)
    #sequence_length: The length of the input sequence
    """
    X_enc = []
    X_dec = []
    y = []

    for i in range(sequence_length, len(data)):
        X_enc.append(data[i-sequence_length:i, :2])  # Load and temperature
        X_dec.append([data[i-1, 0]])  # First time step of load consumption
        y.append([data[i, 0]])  # Next time step of load consumption

    return np.array(X_enc), np.array(X_dec), np.array(y)

# Create the input and output data for the train, validation, and test sets
X_enc_train, X_dec_train, y_train = create_seq2seq_data(train)
X_enc_valid, X_dec_valid, y_valid = create_seq2seq_data(valid)
X_enc_test, X_dec_test, y_test = create_seq2seq_data(test)

# Print the shapes of the input and output data
print("Encoder input shape (train):", X_enc_train.shape)
print("Decoder input shape (train):", X_dec_train.shape)
print("Output shape (train):", y_train.shape)

print("Encoder input shape (valid):", X_enc_valid.shape)
print("Decoder input shape (valid):", X_dec_valid.shape)
print("Output shape (valid):", y_valid.shape)

print("Encoder input shape (test):", X_enc_test.shape)
print("Decoder input shape (test):", X_dec_test.shape)
print("Output shape (test):", y_test.shape)